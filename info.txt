


stages of the compiler
lexical analysis --> syntactic analysis --> contextual analysis --> intermediate code --> code optimization --> code generation 

lexical analysis
  - 

syntactic analysis
  - 3. 
  - 4. 
  - 5. 

contextual anlyasis
  - 

intermediate code
  - 

code optimization
  - https://developers.google.com/speed/pagespeed/service/OptimizeHtml#operation
  - Collapse Whitespace
  - Combine HEADs
  - Convert Meta Tags
  - Elide Attributes
  - Remove Comments
  - Remove Quotes
  - Trim URLs 

code generation 
  - na








-------------------------------------------------- syntax information --------------------------------------------------


syntax
  - indentation matters

- variable declaration
  - var <keyword> = <value>

- if statements
- if (<bool> ): 
    <statement>
  else:
    <statement>


- loops
  - for(<variable declaration>; <bool> ; < adjust variable >):
      <statement>


- head tag,
  - 

- derivatives
  - 

- body
  - 

- b tag
  - 

- p tag
  -

- 


-------------------------------------------------- end syntax information --------------------------------------------------







-------------------------------------------------- types of tokens --------------------------------------------------

properties of all tokens
  - all will have a variable called type, which will equal to the type of that token
  - all will have a variable called text, which will be the string that encomposes that token
  


tag = {
  type = 'tag',
  tag = '--',
  attribtues = [{attributes}]
  text = '--'
}

<parameter> '=' <expression>
attributes = {
  type = '',
  text = '',
  parameter = '--',
  value = '--'
}

'var' <name> '=' <expression>
Assignment = {
  type = 'assignment',
  name = 'name',
  expression = {}
}

'for (' <condition>  '):' \n <statements>
forloop = {
  type: 'forloop',
  condition: 'condition',
  statements = [<statement>],
  text = ''
}
condition = {
  token = 'condition',
  text = '--'
}
statements = { 
  token = 'statement',
  statements = [<statement>]
  text = '--'
}
statement = {
  // TODO
  token = 'statement',
  value = 'token'
  text = '--'
}

name = {
  type: "name"
  value: "any list of values"
  text = '--'
}

expression = {
  type = 'expression'
  value = '';
  text = '--'
}

Comment = {
  type = 'comment'
  text = ''
}

rawText = {
  type = 'rawText',
  text = ''
}

Block = {
  type = 'block'
  name = '--'
  statements = <statements>
  text = '--'
}

-------------------------------------------------- end types of tokens --------------------------------------------------

















-------------------------------------------------- example tree --------------------------------------------------

{
  'token' = 'root',
  'head':{
    type = 'head',
    statements = [
      {
        'type' = 'tag'
        'name' = 'title',
        'value' = 'my jade template',
        'text' = '--'
      }
    ]
    'text'
  },
  'body':[
    {
      'type' = 'tag',
      'name' = 'h1',

      text = '--'
    }
  ]
  text = '--'
}



-------------------------------------------------- end of example tree--------------------------------------------------







