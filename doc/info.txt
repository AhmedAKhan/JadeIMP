


stages of the compiler
lexical analysis --> syntactic analysis --> contextual analysis --> intermediate code --> code optimization --> code generation 

lexical analysis
  - 

syntactic analysis
  - 3. 
  - 4. 
  - 5. 

contextual anlyasis
  - 

intermediate code
  - 

code optimization
  - https://developers.google.com/speed/pagespeed/service/OptimizeHtml#operation
  - Collapse Whitespace
  - Combine HEADs
  - Convert Meta Tags
  - Elide Attributes
  - Remove Comments
  - Remove Quotes
  - Trim URLs 

code generation 
  - na








-------------------------------------------------- syntax information --------------------------------------------------


syntax
  - indentation matters

- variable declaration
  - var <keyword> = <value>

- if statements
- if (<bool> ): 
    <statement>
  else:
    <statement>


- loops
  - while( <bool> ):
        <statements>
  - for(<variable declaration>; <bool> ; < adjust variable >):
      <statement>
  - for(var <variable name> in <list>):
      <statement>

<tag name>(<attribute name>="<value>", ...)


-------------------------------------------------- end syntax information --------------------------------------------------






-------------------------------------------------- types of tokens --------------------------------------------------

properties of all tokens
  - all will have a variable called type, which will equal to the type of that token
  - all will have a variable called text, which will be the string that encomposes that token
  


directive = {
  type = 'directive',
  name = '--',
  attribtues = [{attributes}],
  content = [<token>]
  text = '--'
}


<parameter> '=' <expression>
attributes = {
  type = '',
  text = '',
  parameter = '--',
  value = '--'
}

'var' <name> '=' <expression>
variable = {
  type = 'assignment',
  name = 'name',
  expression = {}
}


if = {
  type = 'if',
  condition = '',
  statements = [<statement>],
  else = [<statement>]
  text = '--'
}

'for (' <condition>  '):' \n <statements>
forloop = {
  type: 'forloop',
  condition: 'condition',
  statements = [<statement>],
  text = ''
}
condition = {
  token = 'condition',
  text = '--'
}
statements = { 
  token = 'statement',
  statements = [<statement>]
  text = '--'
}
statement = {
  // TODO
  token = 'statement',
  value = 'token'
  text = '--'
}

name = {
  type: "name"
  value: "any list of values"
  text = '--'
}

expression = {
  type = 'expression'
  value = '';
  text = '--'
}


rawText = {
  type = 'rawText',
  text = ''
}

Block = {
  type = 'block'
  name = '--'
  statements = [<tokens>]
  text = '--'
}




'/* ' [<rawText>] '*/'
'//' <text>
Comment = {
  type = 'comment'
  text = '--'
}

-------------------------------------------------- end types of tokens --------------------------------------------------


head
body
b
p
h
div
span
ul
  - li
href = 


-------------------------------------------------- start html example  --------------------------------------------------


ul()
    li 
        a(href="asdasd") Book A
    li --


var book = { name:"asdasd",   price:'10'  }


body
    div
        if (@book.name == "ahmed")
            asdasd
        else if()
            asdasdasd



body
    ul
        for( var i = 0; i < 10; i++ )






var sdf = 'Twitter'

body
    table
        tr
            td  $book.name
            td  Forasdfasfasdfasdf
        tr
            td  asasd
            td  asdasdasd
        
            
            



-------------------------------------------------- end html example --------------------------------------------------



{
  type = 'directive',
  'text '= '--',
  content = [{
    type='div',
    text='--'
    cotent = [{ type='block', name='title', text ='--'  }]
  }]
}



title block
{
    'type' = 'tag',
    'name' = 'title',
    content = [
    {
        'type' = 'directive',
        'name' = 'p',
        content = [{ 'type' = 'directive', 'name'= 'b', content = [{'type'= 'rawText', text = 'hello' }]  }, {'type' = rawText, text = 'Ahmed'}]
    }
    ]
    text = ''
}




attribute = {
  type = 'attribute',
  name ='',
  value = '',
  text = ''
}


{
  'type'='directive',
  'name' = 'body',
  'attributes' = [ {
    type = 'attribute',
    name = 'id',
    value = 'nasd',
    text = 'id = "nash"'
  }, ]
      content : [
      {
        type = 'directive',
        name = div,
        content = [
        {
            type = 'if',
            condition = --,
            statement = [

            ],
            else = []

        }
        ]
      }
      ]
          text='--'
}


{
  type = 'block'
  name = 'title',
       statements = [{
            title
       }]
  text = '--'
}




jade code

create block content
    h1 this is something


body
    div Ahmed 
    br 1324501


tree



html



-------------------------------------------------- example tree --------------------------------------------------

{
    'token' = 'root',

        text = '--'
}



-------------------------------------------------- end of example tree--------------------------------------------------





