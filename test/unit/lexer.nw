
@
this is the part that will test the lexer file

<<test code>>=
var expect = require('chai').expect;
console.log("this is from the test file");


describe("trying inline with dot text", function(){
  it("trying inline with dot text", function(done){
    var result = lexer("p. 1. first line\n  2. second line");
    /* console.log("result: " + JSON.stringify(result, null, 2)); */
    expect(result).to.be.an("array").with.length(6);

    /* var barToken = result[0]; */
    /* expect(barToken).to.have.property("type","vertical bar"); */


    var rawTextToken = result[0];
    expect(rawTextToken).to.be.an("object");
    expect(rawTextToken).to.have.property("type", "directive");
    expect(rawTextToken).to.have.property("name", "p");

    var rawTextToken = result[1];
    expect(rawTextToken).to.be.an("object");
    expect(rawTextToken).to.have.property("type", "indent");
    expect(rawTextToken).to.have.property("level", 2);
    expect(rawTextToken).to.have.property("indents", 1);

    var rawTextToken = result[2];
    expect(rawTextToken).to.be.an("object");
    expect(rawTextToken).to.have.property("type", "rawText");
    expect(rawTextToken).to.have.property("value", "1. first line");

    var rawTextToken = result[3];
    expect(rawTextToken).to.be.an("object");
    expect(rawTextToken).to.have.property("type", "rawText");
    expect(rawTextToken).to.have.property("value", "2. second line");

    var rawTextToken = result[4];
    expect(rawTextToken).to.be.an("object");
    expect(rawTextToken).to.have.property("type", "outdent");
    expect(rawTextToken).to.have.property("indents", 0);

    var rawTextToken = result[5];
    expect(rawTextToken).to.have.property("type", "eos");

    done();
  });
})


describe("testing the adjustString", function(){
    it("giving it no input", function(done){
        var input = {text:"1234567890", column:0}
        adjustString(input, 0);
        expect(input).to.have.property("text", "1234567890")
        expect(input).to.have.property("column", 0)
        done();
        })
    });


describe("testing text with dot", function(){
  it("basic p with dot text ", function(done){
    var resultArr = lexer("p.  \n  1. this is the first line\n  2. this is the second line");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */
    
    expect(resultArr).to.be.an("array").with.length(6);

    var result = resultArr[0];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "directive");
    expect(result).to.have.property("name", "p");
    expect(result).to.have.property("level", 0);

    /* //// decided not to have the token dot */
    /* var result = resultArr[1]; */
    /* expect(result).to.be.an("object"); */
    /* expect(result).to.have.property("type", "dot"); */
    /* expect(result).to.have.property("level", 0); */

    var result = resultArr[1];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "indent");
    expect(result).to.have.property("indents", 1);

    var result = resultArr[2];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("level", 1);
    expect(result).to.have.property("value", "1. this is the first line");

    var result = resultArr[3];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("level", 1);
    expect(result).to.have.property("value", "2. this is the second line");

    var result = resultArr[4];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "outdent");
    expect(result).to.have.property("indents", 0);

    var result = resultArr[5];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "eos");

    done();
  });
});

describe("testing text", function(){
  it("going to test normal text with bar", function(done){
    var result = lexer("|  this is some text");
    /* console.log("result: " + JSON.stringify(result, null, 2)); */
    expect(result).to.be.an("array").with.length(2);

    /* var barToken = result[0]; */
    /* expect(barToken).to.have.property("type","vertical bar"); */


    var rawTextToken = result[0];
    expect(rawTextToken).to.have.property("type", "rawText");
    expect(rawTextToken).to.have.property("value", " this is some text");

    var rawTextToken = result[1];
    expect(rawTextToken).to.have.property("type", "eos");

    done();
  })
});

describe("testing the if statement", function(){
  it("going to test a basic if statement", function(done){
    var result = lexer("if 1 == 0");
    /* console.log("result: " + JSON.stringify(result)); */
    expect(result).to.be.an("array").with.length(2);
    expect(result[0]).to.have.property("type","if");
    expect(result[0]).to.have.property("condition","1 == 0");


    expect(result[1]).to.have.property("type","eos");

    done();
  });
});

describe("going to test directives", function(){
  it("basic simple p directive", function(done){
    var resultArr = lexer("p");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */

    expect(resultArr).to.be.a("array")
    .to.have.length(2);

    var result = resultArr[0];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "directive");
    expect(result).to.have.property("name", "p");


    var result = resultArr[1];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "eos");

    done();
  })

  it("bar text + if statement", function(done){
    var resultArr = lexer("if 1 == 2\n  | this is also some text");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */

    expect(resultArr).to.be.a("array")
    .to.have.length(5);

    var ifToken = resultArr[0];
    expect(ifToken).to.be.a("object");
    expect(ifToken).to.have.property("type", "if");
    expect(ifToken).to.have.property("condition", "1 == 2");

    var indent = resultArr[1];
    expect(indent).to.be.an("object");
    expect(indent).to.have.property("type", "indent");
    expect(indent).to.have.property("level", 2);
    expect(indent).to.have.property("indents", 1);

    var rawText = resultArr[2];
    expect(rawText).to.be.an("object");
    expect(rawText).to.have.property("type", "rawText");
    expect(rawText).to.have.property("value", "this is also some text");

    var outdent= resultArr[3];
    expect(outdent).to.be.an("object");
    expect(outdent).to.have.property("type", "outdent");
    expect(outdent).to.have.property("indents", 0);


    var eos = resultArr[4];
    expect(eos).to.be.an("object");
    expect(eos).to.have.property("type", "eos");

    done();
  });

  it("bar text + if statement + outdent", function(done){
    var resultArr = lexer("if 1 == 2\n  | this is also some text\n| this is some more text");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */

    expect(resultArr).to.be.a("array")
    .to.have.length(6);

    var ifToken = resultArr[0];
    expect(ifToken).to.be.a("object");
    expect(ifToken).to.have.property("type", "if");
    expect(ifToken).to.have.property("condition", "1 == 2");

    var indent = resultArr[1];
    expect(indent).to.be.an("object");
    expect(indent).to.have.property("type", "indent");
    expect(indent).to.have.property("level", 2);
    expect(indent).to.have.property("indents", 1);

    var rawText = resultArr[2];
    expect(rawText).to.be.an("object");
    expect(rawText).to.have.property("type", "rawText");
    expect(rawText).to.have.property("value", "this is also some text");

    var outdent = resultArr[3];
    expect(outdent).to.be.an("object");
    expect(outdent).to.have.property("type", "outdent");
    expect(outdent).to.have.property("indents", 0);
    expect(outdent).to.have.property("level", 0);


    var rawText = resultArr[4];
    expect(rawText).to.be.an("object");
    expect(rawText).to.have.property("type", "rawText");
    expect(rawText).to.have.property("value", "this is some more text");


    var result = resultArr[5];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "eos");

    done();
  })

  it("directive with text inline and dot p. abc", function(done){
    var resultArr = lexer("p. abc");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */

    expect(resultArr).to.be.a("array")
    .to.have.length(5);

    var result = resultArr[0];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "directive");
    expect(result).to.have.property("name", "p");

    var result = resultArr[1];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "indent");

    var result = resultArr[2];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("value", "abc");

    var result = resultArr[3];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "outdent");

    var result = resultArr[4];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "eos");

    done();
  });
  

  it("directive with text inline and dot and inline text with indent text", function(done){
    var resultArr = lexer("p. abc\n  def");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */

    expect(resultArr).to.be.a("array")
    .to.have.length(6);

    var result = resultArr[0];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "directive");
    expect(result).to.have.property("name", "p");

    var result = resultArr[1];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "indent");

    var result = resultArr[2];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("value", "abc");

    var result = resultArr[3];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("value", "def");

    var result = resultArr[4];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "outdent");

    var result = resultArr[5];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "eos");

    done();
  });


  it("directive with text inline and dot and inline text with indent text and outdent text", function(done){
    var resultArr = lexer("p. abc\n  def\n| last line");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */

    expect(resultArr).to.be.a("array")
    .to.have.length(7);

    var result = resultArr[0];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "directive");
    expect(result).to.have.property("name", "p");

    var result = resultArr[1];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "indent");

    var result = resultArr[2];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("value", "abc");

    var result = resultArr[3];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("value", "def");

    var result = resultArr[4];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "outdent");

    var result = resultArr[5];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("value", "last line");

    var result = resultArr[6];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "eos");

    done();
  });

  it("directive test with multiple div statements", function(done){
    var resultArr = lexer("div \n  | abc \ndiv \n| def");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */

    expect(resultArr).to.be.a("array")
    .to.have.length(7);

    var result = resultArr[0];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "directive");
    expect(result).to.have.property("name", "div");

    var result = resultArr[1];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "indent");
    expect(result).to.have.property("level", 2);
    expect(result).to.have.property("indents", 1);

    var result = resultArr[2];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("value", "abc ");


    var result = resultArr[3];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "outdent");
    expect(result).to.have.property("level", 0);
    expect(result).to.have.property("indents", 0);

    var result = resultArr[4];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "directive");
    expect(result).to.have.property("name", "div");

    var result = resultArr[5];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("value", "def");


    var result = resultArr[6];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "eos");

    done();
  });


  it("directive with attribute", function(done){
    var resultArr = lexer('div(id="main",class="zxc asd oi", value = 12)');
    console.log("result: " + JSON.stringify(resultArr, null, 2));

    expect(resultArr).to.be.a("array")
    .to.have.length(7);

    var result = resultArr[0];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "directive");
    expect(result).to.have.property("name", "div");

    var result = resultArr[1];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "start-attributes");

    var result = resultArr[2];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "attribute");
    expect(result).to.have.property("attribute", "id");
    expect(result).to.have.property("value", "main");


    var result = resultArr[3];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "attribute");
    expect(result).to.have.property("attribute", "class");
    expect(result).to.have.property("value", "zxc asd oi");

    var result = resultArr[4];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "attribute");
    expect(result).to.have.property("attribute", "value");
    expect(result).to.have.property("value", "12");

    var result = resultArr[5];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "end-attributes");


    var result = resultArr[6];
    expect(result).to.be.a("object");
    expect(result).to.have.property("type", "eos");

    done();
  });
})

describe("testing the for loop", function(){
  it("testing basic for statement", function(done){
    // get the lexed object
    var resultArr = lexer("for (var i = 0; i < 100; i++)");
    /* console.log("text with dot result: " + JSON.stringify(resultArr, null, 2)); */

    // run the tests
    expect(resultArr).to.be.a('array');
    expect(resultArr).to.have.length(2);

    var result = resultArr[0];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "for");
    expect(result).to.have.property("declaration", "var i = 0");
    expect(result).to.have.property("condition", "i < 100");
    expect(result).to.have.property("iteration", "i++");

    var result = resultArr[1];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "eos");

    done();
  });

  it("testing basic for statement without brackets", function(done){
    // get the lexed object
    var resultArr = lexer("for var i = 0; i < 100; i++");

    // run the tests
    expect(resultArr).to.be.a('array');
    expect(resultArr).to.have.length(2);

    var result = resultArr[0];
    expect(result).to.have.property("type", "for");
    expect(result).to.have.property("declaration", "var i = 0");
    expect(result).to.have.property("condition", "i < 100");
    expect(result).to.have.property("iteration", "i++");

    var result = resultArr[1];
    expect(result).to.be.an("object");
    expect(result).to.have.property("type", "eos");

    done();
  });

  it("for statement - brackets, +indents", function(done){
    // get the lexed object
    var resultArr = lexer("    for var i = 0; i < 100; i++");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */

    // run the tests
    expect(resultArr)
    .to.be.a('array')
    .to.have.length(4);

    var indentToken = resultArr[0];
    expect(indentToken).to.be.an("object");
    expect(indentToken).to.have.property("type", "indent");
    expect(indentToken).to.have.property("level", 4);
    expect(indentToken).to.have.property("indents", 1);

    var result = resultArr[1];
    expect(indentToken).to.be.an("object");
    expect(result).to.have.property("type", "for");
    expect(result).to.have.property("declaration", "var i = 0");
    expect(result).to.have.property("condition", "i < 100");
    expect(result).to.have.property("iteration", "i++");

    var indentToken = resultArr[2];
    expect(indentToken).to.be.an("object");
    expect(indentToken).to.have.property("type", "outdent");
    expect(indentToken).to.have.property("indents", 0);

    var indentToken = resultArr[3];
    expect(indentToken).to.be.an("object");
    expect(indentToken).to.have.property("type", "eos");

    done();
  });
})

describe("checking for text with pipes", function(){
  it("checking the line", function(done){
    // get the lexed object
    var resultArr = lexer("p\n  | 1. this is some text\n  | 2. this is the second text\n| 3. this is the third text");
    /* console.log("result: " + JSON.stringify(resultArr, null, 2)); */

    // run the tests
    expect(resultArr)
    .to.be.a('array')
    .to.have.length(7);

    var indentToken = resultArr[0];
    expect(indentToken).to.have.property("type", "directive");
    expect(indentToken).to.have.property("level", 0);
    expect(indentToken).to.have.property("name", "p");

    var result = resultArr[1];
    expect(result).to.have.property("type", "indent");
    expect(result).to.have.property("indents", 1);
    expect(result).to.have.property("level", 2);

    var result = resultArr[2];
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("level", 1);
    expect(result).to.have.property("value", "1. this is some text");

    var result = resultArr[3];
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("level", 1);
    expect(result).to.have.property("value", "2. this is the second text");

    var result = resultArr[4];
    expect(result).to.have.property("type", "outdent");
    expect(result).to.have.property("level", 0);
    expect(result).to.have.property("indents", 0);

    var result = resultArr[5];
    expect(result).to.have.property("type", "rawText");
    expect(result).to.have.property("level", 0);
    expect(result).to.have.property("value", "3. this is the third text");

    var result = resultArr[6];
    expect(result).to.have.property("type", "eos");

    done();
  });
});

console.log("after the describe part");


/*

 */
function test(){
  var result = "";

  /* var source = {"text":"var numberOfApples = 10", "tokens":[], "level":0}; */
  /* result = nextToken(source); */
  /* if(result && result.type == "ident" && result.level == 0){ print("--broke 1---");  } */
  /* print("source: '" + source.text + "'"); */

  /* result = lexer("p. \n  asdasd asda \n  sdasdasd asdsa \n  dsa $zcxz adsad \n  asdad asda \nsdas d asd "); */
  /* print(" result: " + JSON.stringify(result)); */

  /* result = lexer("var apples = 10"); */
  /* expectedTypeOrder(result, ["var", "ident", "=", "number"]) */

  /* result = lexer("  var apples = 10"); */
  /* expectedTypeOrder(result, ["var", "ident", "=", "number"]) */

  /* result = lexer("div. \n  abc\n  | def"); */
  /* print("result: " + JSON.stringify(result)); */

  /* result = lexer("div. \n  abc asd sfsdf \ndiv  \n  | inside the second div"); */
  /* result = lexer("div \n  abc \ndiv  \n  | inside the second div"); */

  /*
     div 
     asd
     asdasd
     zcasd
     asdsad
   */
  /* result = lexer("div \n  asd\n    asdasd\n  zcasd\nasdsad"); */
  /* result = lexer("if true \n  var i = 10\nelse\n  var i = 20"); */

  /* result = lexer("div\n  if true \n    var i = 10\n  else\n    var i = 20"); */

  /* result = lexer("if 1 = 10\n  p\n    | this is in the true condition\nelse\n  p. \n    this is in the false condition"); */

  /* result = lexer("create block title\n  h1. \n  Welcome to our website"); */
  /* result = lexer("create block title\n  h1.  Welcome to our website"); */

  /* result = lexer("for(var i = 0; i < 10; i++)\n  p.\n    this is the $i div"); */


  /* result = lexer('div(num = 10)'); */
  /* print("result: " + JSON.stringify(result, null, 2)); */
}
function expectedTypeOrder(actual, expected){
  if(expected.length != actual.length)
    throw("the length is not the same expected: " + JSON.stringify(expected) +" actual: " + JSON.stringify(actual));
  for(var i = 0; i < actual.length; i++){
    /* console.log("i: " + i + " actual: " + actual[i]); */
    if(expected[i] !== actual[i].type)
      throw("i:  " + i + " expected type to be " + expected + " but got " + actual[i].type);
  }
}
test();




